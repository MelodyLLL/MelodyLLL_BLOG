import{_ as n,o as s,c as a,a as t}from"./app-abb8a49b.js";const p={},e=t(`<h1 id="nodejs-和服务器" tabindex="-1"><a class="header-anchor" href="#nodejs-和服务器" aria-hidden="true">#</a> NodeJS 和服务器</h1><h2 id="js模块导出的两种方式" tabindex="-1"><a class="header-anchor" href="#js模块导出的两种方式" aria-hidden="true">#</a> js模块导出的两种方式？</h2><p>在 Node.js 中，有两种主要的导出模块的方式：CommonJS 和 ES6 的导出方式。下面是它们的主要区别：</p><p>CommonJS（Node.js 模块系统）：</p><ul><li>导出方式： 使用 module.exports 或 exports。</li><li>导入方式： 使用 require。</li><li>特点： 是 Node.js 最早引入的模块系统，它是同步加载的，模块在运行时动态加载，适用于服务器端编程。</li><li>示例：</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 导出模块</span>
<span class="token comment">// file.js</span>
<span class="token keyword">const</span> <span class="token function-variable function">someFunction</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
	<span class="token comment">// some code</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> someFunction<span class="token punctuation">;</span>
<span class="token comment">// 或者</span>
<span class="token comment">// exports.someFunction = someFunction;</span>

<span class="token comment">// 导入模块</span>
<span class="token comment">// anotherFile.js</span>
<span class="token keyword">const</span> importedFunction <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./file&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>ES6 模块系统：</p><ul><li>导出方式： 使用 export 和 export default。</li><li>导入方式： 使用 import。</li><li>特点： 是 ECMAScript 6 引入的模块系统，是异步加载的，支持静态分析，可以在浏览器端和服务器端使用。</li><li>示例：</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 导出模块</span>
<span class="token comment">// file.js</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">someFunction</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
	<span class="token comment">// some code</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// 导入模块</span>
<span class="token comment">// anotherFile.js</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> someFunction <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./file&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 Node.js 中，CommonJS 是默认的模块系统，但是在很多现代的 Node.js 应用中，也可以使用 import 和 export 关键字，因为 Node.js 已经开始支持部分 ES6 模块语法。</p><p>ES6 模块系统更加现代化，支持静态分析和 tree-shaking，有助于构建更轻量的应用。在新项目中，推荐使用 ES6 模块。</p><h2 id="知道洋葱模型吗" tabindex="-1"><a class="header-anchor" href="#知道洋葱模型吗" aria-hidden="true">#</a> 知道洋葱模型吗？</h2><p>在 Koa 中，洋葱模型是一种中间件的执行模式。中间件被组织成类似于洋葱层层叠加的结构，请求和响应通过这些中间件的层层处理，最终到达应用程序的核心。在请求阶段，请求对象从外向内穿过中间件，每个中间件都有机会对请求进行处理。洋葱核心是整个应用的主要业务逻辑。在响应阶段，响应对象从内向外穿过中间件，每个中间件同样有机会对响应进行处理。中间件的异步特性使得在其中可以方便地执行异步操作，使得代码结构更加清晰和易于维护。洋葱模型提供了一种优雅而灵活的方式来组织和管理中间件，是 Koa 框架的一个显著特点。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> Koa <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;koa&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Koa</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 中间件1</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">ctx<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Middleware 1 - Request Phase&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">await</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Middleware 1 - Response Phase&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 中间件2</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">ctx<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Middleware 2 - Request Phase&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">await</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Middleware 2 - Response Phase&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 洋葱核心</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">ctx<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Onion Core - Request Phase&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token comment">// 模拟异步操作</span>
	<span class="token keyword">await</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Onion Core - Response Phase&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">await</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 中间件3</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">ctx<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Middleware 3 - Request Phase&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">await</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Middleware 3 - Response Phase&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Server is running on http://localhost:3000&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="ssr-了解吗" tabindex="-1"><a class="header-anchor" href="#ssr-了解吗" aria-hidden="true">#</a> ssr 了解吗？</h2><p>ssr 也就是服务端渲染，也就是把 vue 在客户端把标签渲染成 HTML·的工作放在服务端完成，然后再把 html 直接返回给客户端。 服务器渲染只支持 created 和 beforeCreated 两个钩子，ssr 有着更好的 seo，首屏加载速度更快。</p>`,16),o=[e];function c(i,l){return s(),a("div",null,o)}const k=n(p,[["render",c],["__file","g-nodejs.html.vue"]]);export{k as default};
